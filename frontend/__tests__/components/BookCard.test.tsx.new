// __tests__/components/BookCard.test.tsx
import React from 'react';
import { render, screen, fireEvent, waitFor } from '../utils/test-utils';
import { describe, test, expect, jest, beforeEach } from '@jest/globals';
import '@testing-library/jest-dom';
import BookCard from '../../components/book/BookCard';
import userService from '../../services/userService';
import { Book } from '../../services/bookService';

// Mock Next.js router
const mockPush = jest.fn();
jest.mock('next/router', () => ({
  useRouter: () => ({
    push: mockPush,
  }),
}));

// Mock userService methods
const mockAddFavorite = jest.fn().mockResolvedValue({ success: true });
const mockRemoveFavorite = jest.fn().mockResolvedValue({ success: true });

jest.mock('../../services/userService', () => ({
  addFavorite: mockAddFavorite,
  removeFavorite: mockRemoveFavorite,
}));

// Mock Next.js Link component
jest.mock('next/link', () => {
  return ({ children, href }: { children: React.ReactNode; href: string }) => {
    return <a href={href}>{children}</a>;
  };
});

// Mock Next.js Image component
jest.mock('next/image', () => {
  return ({ src, alt, width, height, onError }: { src: string; alt: string; width: number; height: number; onError: () => void }) => {
    return <img src={src} alt={alt} width={width} height={height} onError={onError} />;
  };
});

// Mock auth context
jest.mock('../../store/auth-context', () => ({
  useAuth: () => ({
    isAuthenticated: true,
    user: { id: 'user123' },
  }),
}));

describe('BookCard Component', () => {
  // Mock book data
  const mockBook: Book = {
    id: 'book123',
    title: 'Test Book Title',
    author: 'Test Author',
    description: 'This is a test book description that is long enough to test the description preview functionality',
    coverImage: 'https://example.com/test-cover.jpg',
    genres: ['Fiction', 'Fantasy', 'Adventure', 'Science Fiction'],
    publishedYear: 2023,
    averageRating: 4.5,
    reviewCount: 10,
  };

  beforeEach(() => {
    jest.clearAllMocks();
  });

  test('renders basic book information correctly', () => {
    render(<BookCard book={mockBook} />);
    
    // Check if basic book info is rendered
    expect(screen.getByText('Test Book Title')).toBeTruthy();
    expect(screen.getByText(/by Test Author/)).toBeTruthy();
    expect(screen.getByText('4.5')).toBeTruthy();
    expect(screen.getByText(/10 reviews/)).toBeTruthy();
    
    // Check if description preview is rendered correctly
    const descriptionText = screen.getByText(/This is a test book description/);
    expect(descriptionText).toBeTruthy();
    
    // Check if genres are displayed (max 3)
    expect(screen.getByText('Fiction')).toBeTruthy();
    expect(screen.getByText('Fantasy')).toBeTruthy();
    expect(screen.getByText('Adventure')).toBeTruthy();
    
    // Check if +1 indicator is shown for the fourth genre
    expect(screen.getByText('+1')).toBeTruthy();
  });

  test('renders placeholder image when cover image is not available', () => {
    const bookWithoutCover = { ...mockBook, coverImage: '' };
    render(<BookCard book={bookWithoutCover} />);
    
    const image = screen.getByAltText(`Cover for ${mockBook.title}`) as HTMLImageElement;
    expect(image.src).toContain('placeholder');
  });

  test('shows favorite button when user is authenticated', () => {
    render(<BookCard book={mockBook} />);
    
    // Check if favorite button is rendered using the data-testid
    const favoriteButton = screen.getByTestId(`favorite-button-${mockBook.id}`);
    expect(favoriteButton).toBeTruthy();
    expect(favoriteButton.getAttribute('aria-label')).toBe('Add to favorites');
  });

  test('toggles favorite status when favorite button is clicked', async () => {
    const mockOnFavoriteToggle = jest.fn();
    render(<BookCard book={mockBook} onFavoriteToggle={mockOnFavoriteToggle} />);
    
    // Find favorite button and click it
    const favoriteButton = screen.getByTestId(`favorite-button-${mockBook.id}`);
    fireEvent.click(favoriteButton);
    
    // Check if userService.addFavorite was called
    expect(mockAddFavorite).toHaveBeenCalledWith('book123');
    
    // Wait for state update to complete
    await waitFor(() => {
      // Check if onFavoriteToggle callback was called
      expect(mockOnFavoriteToggle).toHaveBeenCalledWith('book123', true);
    });
  });

  test('removes from favorites when already favorite', async () => {
    const mockOnFavoriteToggle = jest.fn();
    render(<BookCard book={mockBook} isFavorite={true} onFavoriteToggle={mockOnFavoriteToggle} />);
    
    // Find the remove button using data-testid and click it
    const favoriteButton = screen.getByTestId(`favorite-button-${mockBook.id}`);
    expect(favoriteButton.getAttribute('aria-label')).toBe('Remove from favorites');
    
    fireEvent.click(favoriteButton);
    
    // Check if userService.removeFavorite was called
    expect(mockRemoveFavorite).toHaveBeenCalledWith('book123');
    
    // Wait for state update to complete
    await waitFor(() => {
      // Check if onFavoriteToggle callback was called
      expect(mockOnFavoriteToggle).toHaveBeenCalledWith('book123', false);
    });
  });

  test('directly removes from favorites when in favorites tab', async () => {
    const mockOnFavoriteToggle = jest.fn();
    render(
      <BookCard 
        book={mockBook} 
        isFavorite={true} 
        inFavoritesTab={true} 
        onFavoriteToggle={mockOnFavoriteToggle} 
      />
    );
    
    // Find the remove button using data-testid and click it
    const favoriteButton = screen.getByTestId(`favorite-button-${mockBook.id}`);
    expect(favoriteButton.getAttribute('aria-label')).toBe('Remove from favorites');
    
    fireEvent.click(favoriteButton);
    
    // Check if userService.removeFavorite was called
    expect(mockRemoveFavorite).toHaveBeenCalledWith('book123');
    
    // Wait for state update to complete
    await waitFor(() => {
      // Check if onFavoriteToggle callback was called
      expect(mockOnFavoriteToggle).toHaveBeenCalledWith('book123', false);
    });
  });

  test('handles image error by showing placeholder', () => {
    render(<BookCard book={mockBook} />);
    
    // Get the image and simulate an error
    const image = screen.getByAltText(`Cover for ${mockBook.title}`);
    fireEvent.error(image);
    
    // Check if the image source is now the placeholder
    expect((image as HTMLImageElement).src).toContain('placeholder');
  });

  test('applies custom class name when provided', () => {
    const { container } = render(<BookCard book={mockBook} className="custom-card-class" />);
    
    const cardElement = container.querySelector('.book-card');
    expect(cardElement?.classList.contains('custom-card-class')).toBe(true);
  });
});
